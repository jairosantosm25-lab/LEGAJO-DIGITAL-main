USE [master]
GO
/****** Object:  Database [LegajosDiresa]    Script Date: 10/07/2025 14:09:55 ******/
CREATE DATABASE [LegajosDiresa]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'LegajosDiresa_data', FILENAME = N'C:\SQLData\LegajosDiresa.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [LegajosDiresa_FS] CONTAINS FILESTREAM  DEFAULT
( NAME = N'LegajosDiresa_filestream', FILENAME = N'C:\SQLData\LegajosDiresa_FS' , MAXSIZE = UNLIMITED)
 LOG ON 
( NAME = N'LegajosDiresa_log', FILENAME = N'C:\SQLData\LegajosDiresa.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT, LEDGER = OFF
GO
ALTER DATABASE [LegajosDiresa] SET COMPATIBILITY_LEVEL = 160
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [LegajosDiresa].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [LegajosDiresa] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [LegajosDiresa] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [LegajosDiresa] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [LegajosDiresa] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [LegajosDiresa] SET ARITHABORT OFF 
GO
ALTER DATABASE [LegajosDiresa] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [LegajosDiresa] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [LegajosDiresa] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [LegajosDiresa] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [LegajosDiresa] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [LegajosDiresa] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [LegajosDiresa] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [LegajosDiresa] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [LegajosDiresa] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [LegajosDiresa] SET  ENABLE_BROKER 
GO
ALTER DATABASE [LegajosDiresa] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [LegajosDiresa] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [LegajosDiresa] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [LegajosDiresa] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [LegajosDiresa] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [LegajosDiresa] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [LegajosDiresa] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [LegajosDiresa] SET RECOVERY FULL 
GO
ALTER DATABASE [LegajosDiresa] SET  MULTI_USER 
GO
ALTER DATABASE [LegajosDiresa] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [LegajosDiresa] SET DB_CHAINING OFF 
GO
ALTER DATABASE [LegajosDiresa] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [LegajosDiresa] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [LegajosDiresa] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [LegajosDiresa] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'LegajosDiresa', N'ON'
GO
ALTER DATABASE [LegajosDiresa] SET ENCRYPTION ON
GO
ALTER DATABASE [LegajosDiresa] SET QUERY_STORE = ON
GO
ALTER DATABASE [LegajosDiresa] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 1000, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 200, WAIT_STATS_CAPTURE_MODE = ON)
GO
USE [LegajosDiresa]
GO
/****** Object:  User [sistemas_admin]    Script Date: 10/07/2025 14:09:55 ******/
CREATE USER [sistemas_admin] FOR LOGIN [sistemas_admin] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [rrhh_user]    Script Date: 10/07/2025 14:09:55 ******/
CREATE USER [rrhh_user] FOR LOGIN [rrhh_user] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [jhonson]    Script Date: 10/07/2025 14:09:55 ******/
CREATE USER [jhonson] FOR LOGIN [jhonson] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  DatabaseRole [DB_Rol_Sistemas]    Script Date: 10/07/2025 14:09:55 ******/
CREATE ROLE [DB_Rol_Sistemas]
GO
/****** Object:  DatabaseRole [DB_Rol_RRHH_Consulta]    Script Date: 10/07/2025 14:09:55 ******/
CREATE ROLE [DB_Rol_RRHH_Consulta]
GO
/****** Object:  DatabaseRole [DB_Rol_Administrador_Legajos]    Script Date: 10/07/2025 14:09:55 ******/
CREATE ROLE [DB_Rol_Administrador_Legajos]
GO
ALTER ROLE [DB_Rol_Sistemas] ADD MEMBER [sistemas_admin]
GO
ALTER ROLE [DB_Rol_RRHH_Consulta] ADD MEMBER [rrhh_user]
GO
ALTER ROLE [DB_Rol_Administrador_Legajos] ADD MEMBER [jhonson]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_nombre_completo]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ============================================
-- 3. FUNCIONES, VISTAS Y TRIGGERS
-- ============================================

-- ------- FUNCIONES -------
CREATE FUNCTION [dbo].[fn_nombre_completo] (@id_personal INT)
RETURNS VARCHAR(150)
AS
BEGIN
    DECLARE @nombre_completo VARCHAR(150);
    SELECT @nombre_completo = CONCAT(nombres, ' ', apellidos)
    FROM personal WHERE id_personal = @id_personal;
    RETURN @nombre_completo;
END;
GO
/****** Object:  UserDefinedFunction [dbo].[fn_obtener_id_usuario_actual]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_obtener_id_usuario_actual]()
RETURNS INT
AS
BEGIN
    -- NOTA: La aplicación debe pasar el ID del usuario a los SPs para una auditoría segura.
    -- Esta función es un placeholder.
    DECLARE @id_usuario INT = NULL;
    RETURN @id_usuario;
END;
GO
/****** Object:  Table [dbo].[unidad_administrativa]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[unidad_administrativa](
	[id_unidad] [int] IDENTITY(1,1) NOT NULL,
	[nombre] [varchar](100) NOT NULL,
	[ubicacion] [varchar](150) NULL,
	[responsable] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_unidad] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[personal](
	[id_personal] [int] IDENTITY(1,1) NOT NULL,
	[dni] [char](8) NOT NULL,
	[nombres] [varchar](50) NOT NULL,
	[apellidos] [varchar](50) NOT NULL,
	[sexo] [char](1) NOT NULL,
	[fecha_nacimiento] [date] NULL,
	[direccion] [varchar](200) NULL,
	[telefono] [varchar](20) NULL,
	[email] [varchar](100) NULL,
	[estado_civil] [varchar](20) NULL,
	[nacionalidad] [varchar](50) NULL,
	[id_unidad] [int] NOT NULL,
	[activo] [bit] NOT NULL,
	[fecha_ingreso] [date] NULL,
	[fecha_registro] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[dni] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_legajos_rrhh]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ------- VISTAS -------
CREATE VIEW [dbo].[vw_legajos_rrhh] AS
SELECT p.id_personal, p.dni, p.nombres, p.apellidos, ua.nombre AS nombre_unidad, p.activo AS personal_activo
FROM personal p
JOIN unidad_administrativa ua ON ua.id_unidad = p.id_unidad;
GO
/****** Object:  Table [dbo].[usuarios]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[usuarios](
	[id_usuario] [int] IDENTITY(1,1) NOT NULL,
	[username] [varchar](50) NOT NULL,
	[password_hash] [varchar](255) NOT NULL,
	[id_rol] [int] NOT NULL,
	[activo] [bit] NOT NULL,
	[fecha_creacion] [datetime] NULL,
	[ultimo_login] [datetime] NULL,
	[two_factor_code] [nvarchar](255) NULL,
	[two_factor_expiry] [datetime] NULL,
	[email] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_usuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[username] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bitacora]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bitacora](
	[id_bitacora] [int] IDENTITY(1,1) NOT NULL,
	[id_usuario] [int] NULL,
	[fecha_hora] [datetime] NOT NULL,
	[modulo] [varchar](50) NOT NULL,
	[accion] [varchar](50) NOT NULL,
	[descripcion] [varchar](1000) NULL,
	[detalle_json] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_bitacora] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_log_sistemas]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_log_sistemas] AS
SELECT b.fecha_hora, COALESCE(u.username, 'Sistema/Trigger') AS username_accion, b.modulo, b.accion, b.descripcion, b.detalle_json
FROM bitacora b
LEFT JOIN usuarios u ON b.id_usuario = u.id_usuario;
GO
/****** Object:  Table [dbo].[solicitudes_modificacion]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[solicitudes_modificacion](
	[id_solicitud] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[id_usuario_solicitante] [int] NOT NULL,
	[fecha_solicitud] [datetime] NOT NULL,
	[campo_modificado] [varchar](100) NOT NULL,
	[valor_anterior] [varchar](500) NULL,
	[valor_nuevo] [varchar](500) NULL,
	[estado] [varchar](20) NOT NULL,
	[observaciones] [varchar](500) NULL,
	[id_usuario_revisor] [int] NULL,
	[fecha_revision] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[id_solicitud] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_solicitudes_pendientes]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_solicitudes_pendientes] AS
SELECT s.id_solicitud, s.fecha_solicitud, dbo.fn_nombre_completo(s.id_personal) AS nombre_completo_personal, p.dni, u.username AS usuario_solicitante,
       s.campo_modificado, s.valor_anterior, s.valor_nuevo
FROM solicitudes_modificacion s
JOIN personal p ON s.id_personal = p.id_personal
JOIN usuarios u ON s.id_usuario_solicitante = u.id_usuario
WHERE s.estado = 'pendiente';
GO
/****** Object:  Table [dbo].[tipo_documento]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_documento](
	[id_tipo] [int] IDENTITY(1,1) NOT NULL,
	[nombre_tipo] [varchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[legajo_secciones]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[legajo_secciones](
	[id_seccion] [int] IDENTITY(1,1) NOT NULL,
	[nombre_seccion] [varchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_seccion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_seccion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[documentos]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[documentos](
	[id_documento] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[id_tipo] [int] NOT NULL,
	[id_seccion] [int] NOT NULL,
	[nombre_archivo] [varchar](200) NOT NULL,
	[fecha_subida] [datetime] NOT NULL,
	[fecha_emision] [date] NULL,
	[fecha_vencimiento] [date] NULL,
	[descripcion] [varchar](500) NULL,
	[archivo_guid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[archivo] [varbinary](max) FILESTREAM  NULL,
	[hash_archivo] [varchar](64) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_documento] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY] FILESTREAM_ON [LegajosDiresa_FS],
UNIQUE NONCLUSTERED 
(
	[archivo_guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] FILESTREAM_ON [LegajosDiresa_FS]
GO
/****** Object:  View [dbo].[vw_LegajoCompleto_Detallado]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_LegajoCompleto_Detallado] AS
SELECT p.id_personal, p.dni, CONCAT(p.apellidos, ', ', p.nombres) AS nombre_completo,
       ls.id_seccion, ls.nombre_seccion, d.id_documento, td.nombre_tipo, d.descripcion, d.fecha_emision, d.nombre_archivo,
       (CASE WHEN d.archivo IS NULL THEN 0 ELSE 1 END) AS tiene_archivo_adjunto
FROM personal p
LEFT JOIN documentos d ON p.id_personal = d.id_personal
LEFT JOIN legajo_secciones ls ON d.id_seccion = ls.id_seccion
LEFT JOIN tipo_documento td ON d.id_tipo = td.id_tipo;
GO
/****** Object:  Table [dbo].[capacitaciones]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[capacitaciones](
	[id_capacitacion] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[nombre_evento] [varchar](100) NOT NULL,
	[organizador] [varchar](100) NULL,
	[fecha_inicio] [date] NOT NULL,
	[fecha_fin] [date] NULL,
	[duracion_horas] [int] NULL,
	[ruta_certificado] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_capacitacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cargos]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cargos](
	[id_cargo] [int] IDENTITY(1,1) NOT NULL,
	[nombre_cargo] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_cargo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_cargo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[contratos]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[contratos](
	[id_contrato] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[id_tipo_contrato] [int] NOT NULL,
	[fecha_inicio] [date] NOT NULL,
	[fecha_fin] [date] NULL,
	[modalidad] [varchar](50) NULL,
	[sueldo] [decimal](12, 2) NOT NULL,
	[resolucion] [varchar](300) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_contrato] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[estudios]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[estudios](
	[id_estudio] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[nivel_educativo] [varchar](50) NOT NULL,
	[institucion] [varchar](100) NOT NULL,
	[carrera] [varchar](100) NULL,
	[fecha_inicio] [date] NULL,
	[fecha_fin] [date] NULL,
	[titulo_obtenido] [varchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_estudio] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[historial_laboral]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[historial_laboral](
	[id_historial] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[id_cargo] [int] NOT NULL,
	[id_unidad] [int] NOT NULL,
	[fecha_inicio] [date] NOT NULL,
	[fecha_fin] [date] NULL,
	[motivo_salida] [varchar](300) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_historial] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[licencias]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[licencias](
	[id_licencia] [int] IDENTITY(1,1) NOT NULL,
	[id_personal] [int] NOT NULL,
	[id_tipo_licencia] [int] NOT NULL,
	[fecha_inicio] [date] NOT NULL,
	[fecha_fin] [date] NOT NULL,
	[resolucion] [varchar](300) NULL,
PRIMARY KEY CLUSTERED 
(
	[id_licencia] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[roles]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[roles](
	[id_rol] [int] IDENTITY(1,1) NOT NULL,
	[nombre_rol] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_rol] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_rol] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[seccion_x_tipo_documento]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[seccion_x_tipo_documento](
	[id_seccion] [int] NOT NULL,
	[id_tipo] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_seccion] ASC,
	[id_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_documento_seccion_relacion]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_documento_seccion_relacion](
	[id_tipo_documento] [int] NOT NULL,
	[id_seccion] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_tipo_documento] ASC,
	[id_seccion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipos_contrato]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipos_contrato](
	[id_tipo_contrato] [int] IDENTITY(1,1) NOT NULL,
	[nombre_tipo] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_tipo_contrato] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipos_licencia]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipos_licencia](
	[id_tipo_licencia] [int] IDENTITY(1,1) NOT NULL,
	[nombre_tipo] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id_tipo_licencia] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[nombre_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_Bitacora_FechaHora]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Bitacora_FechaHora] ON [dbo].[bitacora]
(
	[fecha_hora] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Bitacora_ModuloAccion]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Bitacora_ModuloAccion] ON [dbo].[bitacora]
(
	[modulo] ASC,
	[accion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Bitacora_Usuario]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Bitacora_Usuario] ON [dbo].[bitacora]
(
	[id_usuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Capacitaciones_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Capacitaciones_PersonalID] ON [dbo].[capacitaciones]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Contratos_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Contratos_PersonalID] ON [dbo].[contratos]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Contratos_TipoContratoID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Contratos_TipoContratoID] ON [dbo].[contratos]
(
	[id_tipo_contrato] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Documentos_FechaSubida]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Documentos_FechaSubida] ON [dbo].[documentos]
(
	[fecha_subida] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Documentos_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Documentos_PersonalID] ON [dbo].[documentos]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Documentos_SeccionID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Documentos_SeccionID] ON [dbo].[documentos]
(
	[id_seccion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Documentos_TipoID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Documentos_TipoID] ON [dbo].[documentos]
(
	[id_tipo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Estudios_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Estudios_PersonalID] ON [dbo].[estudios]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_HistorialLaboral_CargoID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_HistorialLaboral_CargoID] ON [dbo].[historial_laboral]
(
	[id_cargo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_HistorialLaboral_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_HistorialLaboral_PersonalID] ON [dbo].[historial_laboral]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_HistorialLaboral_UnidadID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_HistorialLaboral_UnidadID] ON [dbo].[historial_laboral]
(
	[id_unidad] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Licencias_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Licencias_PersonalID] ON [dbo].[licencias]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Licencias_TipoLicenciaID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Licencias_TipoLicenciaID] ON [dbo].[licencias]
(
	[id_tipo_licencia] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Personal_Activo]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Personal_Activo] ON [dbo].[personal]
(
	[activo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Personal_DNI]    Script Date: 10/07/2025 14:09:55 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Personal_DNI] ON [dbo].[personal]
(
	[dni] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Personal_Email]    Script Date: 10/07/2025 14:09:55 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Personal_Email] ON [dbo].[personal]
(
	[email] ASC
)
WHERE ([email] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Personal_Unidad]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Personal_Unidad] ON [dbo].[personal]
(
	[id_unidad] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Solicitudes_Estado]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Solicitudes_Estado] ON [dbo].[solicitudes_modificacion]
(
	[estado] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Solicitudes_PersonalID]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Solicitudes_PersonalID] ON [dbo].[solicitudes_modificacion]
(
	[id_personal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Solicitudes_UsuarioSolicitante]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Solicitudes_UsuarioSolicitante] ON [dbo].[solicitudes_modificacion]
(
	[id_usuario_solicitante] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Usuarios_Activo]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Usuarios_Activo] ON [dbo].[usuarios]
(
	[activo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Usuarios_Email_Unico]    Script Date: 10/07/2025 14:09:55 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Usuarios_Email_Unico] ON [dbo].[usuarios]
(
	[email] ASC
)
WHERE ([email] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Usuarios_Rol]    Script Date: 10/07/2025 14:09:55 ******/
CREATE NONCLUSTERED INDEX [IX_Usuarios_Rol] ON [dbo].[usuarios]
(
	[id_rol] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[bitacora] ADD  DEFAULT (getdate()) FOR [fecha_hora]
GO
ALTER TABLE [dbo].[documentos] ADD  DEFAULT (getdate()) FOR [fecha_subida]
GO
ALTER TABLE [dbo].[documentos] ADD  DEFAULT (newid()) FOR [archivo_guid]
GO
ALTER TABLE [dbo].[personal] ADD  DEFAULT ((1)) FOR [activo]
GO
ALTER TABLE [dbo].[personal] ADD  DEFAULT (getdate()) FOR [fecha_registro]
GO
ALTER TABLE [dbo].[solicitudes_modificacion] ADD  DEFAULT (getdate()) FOR [fecha_solicitud]
GO
ALTER TABLE [dbo].[solicitudes_modificacion] ADD  DEFAULT ('pendiente') FOR [estado]
GO
ALTER TABLE [dbo].[usuarios] ADD  DEFAULT ((1)) FOR [activo]
GO
ALTER TABLE [dbo].[usuarios] ADD  DEFAULT (getdate()) FOR [fecha_creacion]
GO
ALTER TABLE [dbo].[bitacora]  WITH CHECK ADD FOREIGN KEY([id_usuario])
REFERENCES [dbo].[usuarios] ([id_usuario])
GO
ALTER TABLE [dbo].[capacitaciones]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[contratos]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[contratos]  WITH CHECK ADD FOREIGN KEY([id_tipo_contrato])
REFERENCES [dbo].[tipos_contrato] ([id_tipo_contrato])
GO
ALTER TABLE [dbo].[documentos]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[documentos]  WITH CHECK ADD FOREIGN KEY([id_seccion])
REFERENCES [dbo].[legajo_secciones] ([id_seccion])
GO
ALTER TABLE [dbo].[documentos]  WITH CHECK ADD FOREIGN KEY([id_tipo])
REFERENCES [dbo].[tipo_documento] ([id_tipo])
GO
ALTER TABLE [dbo].[estudios]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[historial_laboral]  WITH CHECK ADD FOREIGN KEY([id_cargo])
REFERENCES [dbo].[cargos] ([id_cargo])
GO
ALTER TABLE [dbo].[historial_laboral]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[historial_laboral]  WITH CHECK ADD FOREIGN KEY([id_unidad])
REFERENCES [dbo].[unidad_administrativa] ([id_unidad])
GO
ALTER TABLE [dbo].[licencias]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[licencias]  WITH CHECK ADD FOREIGN KEY([id_tipo_licencia])
REFERENCES [dbo].[tipos_licencia] ([id_tipo_licencia])
GO
ALTER TABLE [dbo].[personal]  WITH CHECK ADD FOREIGN KEY([id_unidad])
REFERENCES [dbo].[unidad_administrativa] ([id_unidad])
GO
ALTER TABLE [dbo].[seccion_x_tipo_documento]  WITH CHECK ADD FOREIGN KEY([id_seccion])
REFERENCES [dbo].[legajo_secciones] ([id_seccion])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[seccion_x_tipo_documento]  WITH CHECK ADD FOREIGN KEY([id_tipo])
REFERENCES [dbo].[tipo_documento] ([id_tipo])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[solicitudes_modificacion]  WITH CHECK ADD FOREIGN KEY([id_personal])
REFERENCES [dbo].[personal] ([id_personal])
GO
ALTER TABLE [dbo].[solicitudes_modificacion]  WITH CHECK ADD FOREIGN KEY([id_usuario_solicitante])
REFERENCES [dbo].[usuarios] ([id_usuario])
GO
ALTER TABLE [dbo].[solicitudes_modificacion]  WITH CHECK ADD FOREIGN KEY([id_usuario_revisor])
REFERENCES [dbo].[usuarios] ([id_usuario])
GO
ALTER TABLE [dbo].[tipo_documento_seccion_relacion]  WITH CHECK ADD FOREIGN KEY([id_seccion])
REFERENCES [dbo].[legajo_secciones] ([id_seccion])
GO
ALTER TABLE [dbo].[tipo_documento_seccion_relacion]  WITH CHECK ADD FOREIGN KEY([id_tipo_documento])
REFERENCES [dbo].[tipo_documento] ([id_tipo])
GO
ALTER TABLE [dbo].[usuarios]  WITH CHECK ADD FOREIGN KEY([id_rol])
REFERENCES [dbo].[roles] ([id_rol])
GO
ALTER TABLE [dbo].[capacitaciones]  WITH CHECK ADD  CONSTRAINT [CHK_CapacitacionFechas] CHECK  (([fecha_fin] IS NULL OR [fecha_fin]>=[fecha_inicio]))
GO
ALTER TABLE [dbo].[capacitaciones] CHECK CONSTRAINT [CHK_CapacitacionFechas]
GO
ALTER TABLE [dbo].[contratos]  WITH CHECK ADD  CONSTRAINT [CHK_ContratoFechas] CHECK  (([fecha_fin] IS NULL OR [fecha_fin]>=[fecha_inicio]))
GO
ALTER TABLE [dbo].[contratos] CHECK CONSTRAINT [CHK_ContratoFechas]
GO
ALTER TABLE [dbo].[estudios]  WITH CHECK ADD  CONSTRAINT [CHK_EstudioFechas] CHECK  (([fecha_fin] IS NULL OR [fecha_fin]>=[fecha_inicio]))
GO
ALTER TABLE [dbo].[estudios] CHECK CONSTRAINT [CHK_EstudioFechas]
GO
ALTER TABLE [dbo].[historial_laboral]  WITH CHECK ADD  CONSTRAINT [CHK_HistorialLaboralFechas] CHECK  (([fecha_fin] IS NULL OR [fecha_fin]>=[fecha_inicio]))
GO
ALTER TABLE [dbo].[historial_laboral] CHECK CONSTRAINT [CHK_HistorialLaboralFechas]
GO
ALTER TABLE [dbo].[licencias]  WITH CHECK ADD  CONSTRAINT [CHK_LicenciaFechas] CHECK  (([fecha_fin]>=[fecha_inicio]))
GO
ALTER TABLE [dbo].[licencias] CHECK CONSTRAINT [CHK_LicenciaFechas]
GO
ALTER TABLE [dbo].[personal]  WITH CHECK ADD CHECK  (([sexo]='F' OR [sexo]='M'))
GO
ALTER TABLE [dbo].[solicitudes_modificacion]  WITH CHECK ADD CHECK  (([estado]='rechazada' OR [estado]='aprobada' OR [estado]='pendiente'))
GO
/****** Object:  StoredProcedure [dbo].[sp_actualizar_password_usuario]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para actualizar la contraseña de un usuario
CREATE PROCEDURE [dbo].[sp_actualizar_password_usuario]
    @username VARCHAR(50),
    @new_password_hash NVARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE usuarios
    SET password_hash = @new_password_hash
    WHERE username = @username;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_actualizar_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para actualizar datos del personal
CREATE PROCEDURE [dbo].[sp_actualizar_personal]
    @id_personal INT, @dni CHAR(8), @nombres VARCHAR(50), @apellidos VARCHAR(50), @sexo CHAR(1), @fecha_nacimiento DATE,
    @direccion VARCHAR(200), @telefono VARCHAR(20), @email VARCHAR(100), @estado_civil VARCHAR(20), @nacionalidad VARCHAR(50),
    @id_unidad INT, @fecha_ingreso DATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (SELECT 1 FROM personal WHERE dni = @dni AND id_personal <> @id_personal)
    BEGIN
        THROW 50010, 'Error: El DNI ya está registrado por otra persona.', 1;
    END

    IF EXISTS (SELECT 1 FROM personal WHERE email = @email AND id_personal <> @id_personal AND @email IS NOT NULL)
    BEGIN
        THROW 50011, 'Error: El correo electrónico ya está en uso por otra persona.', 1;
    END

    BEGIN TRY
        UPDATE personal
        SET dni = @dni, nombres = @nombres, apellidos = @apellidos, sexo = @sexo, fecha_nacimiento = @fecha_nacimiento,
            direccion = @direccion, telefono = @telefono, email = @email, estado_civil = @estado_civil,
            nacionalidad = @nacionalidad, id_unidad = @id_unidad, fecha_ingreso = @fecha_ingreso
        WHERE id_personal = @id_personal;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[sp_actualizar_ultimo_login]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para registrar el último login
CREATE PROCEDURE [dbo].[sp_actualizar_ultimo_login]
    @id_usuario INT
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE usuarios
    SET ultimo_login = GETUTCDATE()
    WHERE id_usuario = @id_usuario;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_eliminar_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para desactivar personal (borrado suave)
CREATE PROCEDURE [dbo].[sp_eliminar_personal]
    @id_personal INT
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE personal SET activo = 0 WHERE id_personal = @id_personal;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_generar_reporte_general_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para generar el reporte general (versión corregida)
CREATE PROCEDURE [dbo].[sp_generar_reporte_general_personal]
AS
BEGIN
    SET NOCOUNT ON;
    WITH UltimoCargo AS (
        SELECT hl.id_personal, cg.nombre_cargo AS cargo, ROW_NUMBER() OVER(PARTITION BY hl.id_personal ORDER BY hl.fecha_inicio DESC) as rn_cargo
        FROM historial_laboral hl JOIN cargos cg ON hl.id_cargo = cg.id_cargo
    ),
    UltimoContrato AS (
        SELECT c.id_personal, c.modalidad, c.sueldo, c.resolucion, tc.nombre_tipo AS tipo_contrato, ROW_NUMBER() OVER(PARTITION BY c.id_personal ORDER BY c.fecha_inicio DESC) as rn_contrato
        FROM contratos c JOIN tipos_contrato tc ON c.id_tipo_contrato = tc.id_tipo_contrato
    )
    SELECT p.dni, p.apellidos, p.nombres, p.sexo, p.fecha_nacimiento, p.email, p.telefono, ua.nombre as nombre_unidad, p.fecha_ingreso,
           p.activo, ucg.cargo, uct.tipo_contrato, uct.modalidad, uct.sueldo, uct.resolucion
    FROM personal p
    JOIN unidad_administrativa ua ON p.id_unidad = ua.id_unidad
    LEFT JOIN UltimoCargo ucg ON p.id_personal = ucg.id_personal AND ucg.rn_cargo = 1
    LEFT JOIN UltimoContrato uct ON p.id_personal = uct.id_personal AND uct.rn_contrato = 1
    ORDER BY p.apellidos, p.nombres;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_gestionar_solicitud_modificacion]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para gestionar solicitudes de modificación
CREATE PROCEDURE [dbo].[sp_gestionar_solicitud_modificacion]
    @id_solicitud INT, @estado_nuevo VARCHAR(20), @observaciones_revision VARCHAR(500), @id_usuario_revisor INT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @id_personal INT, @campo_modificado VARCHAR(100), @valor_nuevo VARCHAR(500);
    SELECT @id_personal = id_personal, @campo_modificado = campo_modificado, @valor_nuevo = valor_nuevo
    FROM solicitudes_modificacion WHERE id_solicitud = @id_solicitud AND estado = 'pendiente';
    IF @id_personal IS NULL THROW 50009, 'Error: Solicitud no encontrada o ya procesada.', 1;
    BEGIN TRY
        UPDATE solicitudes_modificacion SET estado = @estado_nuevo, observaciones = @observaciones_revision, id_usuario_revisor = @id_usuario_revisor, fecha_revision = GETDATE() WHERE id_solicitud = @id_solicitud;
        IF @estado_nuevo = 'aprobada'
        BEGIN
            DECLARE @sql_dinamico NVARCHAR(MAX) = N'UPDATE personal SET ' + QUOTENAME(@campo_modificado) + N' = @valor_nuevo WHERE id_personal = @id_personal;';
            EXEC sp_executesql @sql_dinamico, N'@valor_nuevo NVARCHAR(500), @id_personal INT', @valor_nuevo = @valor_nuevo, @id_personal = @id_personal;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_listar_bitacora_paginada]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para listar la bitácora de forma paginada
CREATE PROCEDURE [dbo].[sp_listar_bitacora_paginada]
    @PageNumber INT, @PageSize INT
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT b.id_bitacora, b.fecha_hora, u.username, b.modulo, b.accion, b.descripcion
    FROM bitacora b
    LEFT JOIN usuarios u ON b.id_usuario = u.id_usuario
    ORDER BY b.fecha_hora DESC
    OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT COUNT(*) AS TotalRecords FROM bitacora;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_listar_documentos_por_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para listar los documentos de un empleado
CREATE PROCEDURE [dbo].[sp_listar_documentos_por_personal]
    @id_personal INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT d.*, ls.nombre_seccion
    FROM documentos d JOIN legajo_secciones ls ON d.id_seccion = ls.id_seccion
    WHERE d.id_personal = @id_personal
    ORDER BY d.fecha_subida DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_listar_personal_paginado]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para listar personal de forma paginada con filtros
CREATE PROCEDURE [dbo].[sp_listar_personal_paginado]
    @PageNumber INT = 1, @PageSize INT = 15, @DNI_Filter CHAR(8) = NULL, @Nombres_Filter VARCHAR(100) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @Query NVARCHAR(MAX);
    DECLARE @WhereClause NVARCHAR(MAX) = N'';

    IF @DNI_Filter IS NOT NULL AND @DNI_Filter <> ''
        SET @WhereClause = @WhereClause + ' AND p.dni LIKE ''%'' + @DNI_Filter + ''%''';

    IF @Nombres_Filter IS NOT NULL AND @Nombres_Filter <> ''
        SET @WhereClause = @WhereClause + ' AND (p.nombres LIKE ''%'' + @Nombres_Filter + ''%'' OR p.apellidos LIKE ''%'' + @Nombres_Filter + ''%'')';

    IF LEN(@WhereClause) > 0
        SET @WhereClause = 'WHERE' + SUBSTRING(@WhereClause, 5, LEN(@WhereClause));

    SET @Query = N'
    SELECT p.id_personal, p.dni, p.nombres, p.apellidos, ua.nombre AS unidad_administrativa, p.activo
    FROM personal p JOIN unidad_administrativa ua ON p.id_unidad = ua.id_unidad ' + @WhereClause + '
    ORDER BY p.apellidos, p.nombres
    OFFSET (' + CAST(@PageNumber AS NVARCHAR(10)) + ' - 1) * ' + CAST(@PageSize AS NVARCHAR(10)) + ' ROWS
    FETCH NEXT ' + CAST(@PageSize AS NVARCHAR(10)) + ' ROWS ONLY;';

    EXEC sp_executesql @Query, N'@DNI_Filter CHAR(8), @Nombres_Filter VARCHAR(100)', @DNI_Filter, @Nombres_Filter;

    SET @Query = N'SELECT COUNT(p.id_personal) FROM personal p ' + @WhereClause;
    EXEC sp_executesql @Query, N'@DNI_Filter CHAR(8), @Nombres_Filter VARCHAR(100)', @DNI_Filter, @Nombres_Filter;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_listar_tipos_documento_por_seccion]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_listar_tipos_documento_por_seccion]
    @id_seccion INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT
        td.id_tipo,
        td.nombre_tipo
    FROM
        tipo_documento td
    JOIN
        tipo_documento_seccion_relacion tdsr ON td.id_tipo = tdsr.id_tipo_documento
    WHERE
        tdsr.id_seccion = @id_seccion
    ORDER BY
        td.nombre_tipo;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_obtener_documento_por_id]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para obtener el contenido de un documento
CREATE PROCEDURE [dbo].[sp_obtener_documento_por_id]
    @id_documento INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT nombre_archivo, archivo FROM documentos WHERE id_documento = @id_documento;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_obtener_legajo_completo_por_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para obtener el legajo completo de una persona (múltiples result sets)
CREATE PROCEDURE [dbo].[sp_obtener_legajo_completo_por_personal]
    @id_personal INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM personal WHERE id_personal = @id_personal; -- Result 1: Datos Personales
    SELECT * FROM estudios WHERE id_personal = @id_personal ORDER BY fecha_fin DESC; -- Result 2: Estudios
    SELECT * FROM capacitaciones WHERE id_personal = @id_personal ORDER BY fecha_fin DESC; -- Result 3: Capacitaciones
    SELECT c.*, tc.nombre_tipo as tipo_contrato_nombre FROM contratos c JOIN tipos_contrato tc ON c.id_tipo_contrato = tc.id_tipo_contrato WHERE c.id_personal = @id_personal ORDER BY fecha_inicio DESC; -- Result 4: Contratos
    SELECT hl.*, cg.nombre_cargo, ua.nombre as unidad_administrativa_nombre FROM historial_laboral hl JOIN cargos cg ON hl.id_cargo = cg.id_cargo JOIN unidad_administrativa ua ON hl.id_unidad = ua.id_unidad WHERE hl.id_personal = @id_personal ORDER BY fecha_inicio DESC; -- Result 5: Historial
    SELECT l.*, tl.nombre_tipo as tipo_licencia_nombre FROM licencias l JOIN tipos_licencia tl ON l.id_tipo_licencia = tl.id_tipo_licencia WHERE l.id_personal = @id_personal ORDER BY fecha_inicio DESC; -- Result 6: Licencias
    SELECT d.*, ls.nombre_seccion, td.nombre_tipo FROM documentos d JOIN legajo_secciones ls ON d.id_seccion = ls.id_seccion JOIN tipo_documento td ON d.id_tipo = td.id_tipo WHERE d.id_personal = @id_personal ORDER BY ls.id_seccion, d.fecha_subida DESC; -- Result 7: Documentos
END
GO
/****** Object:  StoredProcedure [dbo].[sp_obtener_personal_por_id]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para obtener los detalles de un registro de personal por ID
CREATE PROCEDURE [dbo].[sp_obtener_personal_por_id]
    @id_personal INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM personal WHERE id_personal = @id_personal;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_obtener_usuario_por_id]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para obtener usuario por ID (versión corregida)
CREATE PROCEDURE [dbo].[sp_obtener_usuario_por_id]
    @id_usuario INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT u.*, r.nombre_rol, CONCAT(p.nombres, ' ', p.apellidos) AS nombre_completo, p.email, u.ultimo_login
    FROM usuarios u
    JOIN roles r ON u.id_rol = r.id_rol
    LEFT JOIN personal p ON u.username = p.dni
    WHERE u.id_usuario = @id_usuario;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_obtener_usuario_por_username]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_obtener_usuario_por_username]
    @username VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Este procedimiento ahora buscará el correo directamente en la tabla 'usuarios'.
    -- El JOIN con 'personal' se mantiene para obtener el nombre completo.
    SELECT 
        u.id_usuario,
        u.username,
        u.password_hash,
        u.id_rol,
        u.activo,
        u.fecha_creacion,
        u.ultimo_login,
        u.two_factor_code,
        u.two_factor_expiry,
        u.email, -- Se devuelve el nuevo campo de email directamente
        r.nombre_rol,
        CONCAT(p.nombres, ' ', p.apellidos) AS nombre_completo
    FROM 
        usuarios u
    JOIN 
        roles r ON u.id_rol = r.id_rol
    LEFT JOIN 
        personal p ON u.username = p.dni -- Se mantiene el LEFT JOIN por si el usuario no es personal
    WHERE 
        u.username = @username;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_registrar_bitacora]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para registrar en la bitácora
CREATE PROCEDURE [dbo].[sp_registrar_bitacora]
    @id_usuario INT, @modulo VARCHAR(50), @accion VARCHAR(50),
    @descripcion VARCHAR(1000), @detalle_json NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO bitacora (id_usuario, modulo, accion, descripcion, detalle_json)
    VALUES (@id_usuario, @modulo, @accion, @descripcion, @detalle_json);
END
GO
/****** Object:  StoredProcedure [dbo].[sp_registrar_personal]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- NOTA: Se podrían añadir aquí los triggers para las tablas restantes (documentos, estudios, etc.) siguiendo el mismo patrón.


-- ============================================
-- 4. PROCEDIMIENTOS ALMACENADOS
-- ============================================

-- SP para registrar personal (versión final con transacciones y devolución de ID)
CREATE PROCEDURE [dbo].[sp_registrar_personal]
    @dni CHAR(8), @nombres VARCHAR(50), @apellidos VARCHAR(50), @sexo CHAR(1), @fecha_nacimiento DATE, @direccion VARCHAR(200),
    @telefono VARCHAR(20), @email VARCHAR(100), @estado_civil VARCHAR(20), @nacionalidad VARCHAR(50), @id_unidad INT, @fecha_ingreso DATE
AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
    BEGIN TRANSACTION;
    BEGIN TRY
        IF EXISTS (SELECT 1 FROM personal WHERE dni = @dni)
        BEGIN
            RAISERROR('Error: El DNI ya se encuentra registrado.', 16, 1);
            RETURN;
        END

        IF @email IS NOT NULL AND @email <> '' AND EXISTS (SELECT 1 FROM personal WHERE email = @email)
        BEGIN
            RAISERROR('Error: El correo electrónico ya está en uso por otra persona.', 16, 1);
            RETURN;
        END

        INSERT INTO personal (dni, nombres, apellidos, sexo, fecha_nacimiento, direccion, telefono, email, estado_civil, nacionalidad, id_unidad, fecha_ingreso)
        VALUES (@dni, @nombres, @apellidos, @sexo, @fecha_nacimiento, @direccion, @telefono, @email, @estado_civil, @nacionalidad, @id_unidad, @fecha_ingreso); 
        
        SELECT SCOPE_IDENTITY() AS NewPersonalID;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
        ;THROW;
    END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_subir_documento]    Script Date: 10/07/2025 14:09:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP para subir un documento
CREATE PROCEDURE [dbo].[sp_subir_documento]
    @id_personal INT, @id_tipo INT, @id_seccion INT, @nombre_archivo VARCHAR(200), @fecha_emision DATE, @fecha_vencimiento DATE,
    @descripcion VARCHAR(500), @archivo VARBINARY(MAX), @hash_archivo VARCHAR(64)
AS
BEGIN
    SET NOCOUNT ON;
    IF NOT EXISTS (SELECT 1 FROM personal WHERE id_personal = @id_personal) THROW 50007, 'Error: Personal no encontrado.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_documento WHERE id_tipo = @id_tipo) THROW 50008, 'Error: Tipo de documento no encontrado.', 1;
    BEGIN TRY
        INSERT INTO documentos (id_personal, id_tipo, id_seccion, nombre_archivo, fecha_emision, fecha_vencimiento, descripcion, archivo, hash_archivo)
        VALUES (@id_personal, @id_tipo, @id_seccion, @nombre_archivo, @fecha_emision, @fecha_vencimiento, @descripcion, @archivo, @hash_archivo);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END;
GO
USE [master]
GO
ALTER DATABASE [LegajosDiresa] SET  READ_WRITE 
GO
